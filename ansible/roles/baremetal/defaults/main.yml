---
# Whether to enable a package repository for Docker.
enable_docker_repo: true

# Whether to use the legacy Docker packages at dockerproject.org instead of the
# newer packages at docker.com.
docker_legacy_packages: false

# Docker APT repository configuration.
docker_apt_url: "{% if docker_legacy_packages | bool %}{{ docker_legacy_apt_url }}{% else %}{{ docker_new_apt_url }}{% endif %}"
docker_apt_repo: "{% if docker_legacy_packages | bool %}{{ docker_legacy_apt_repo }}{% else %}{{ docker_new_apt_repo }}{% endif %}"
docker_apt_key_file: "{% if docker_legacy_packages | bool %}{{ docker_legacy_apt_key_file }}{% else %}{{ docker_new_apt_key_file }}{% endif %}"
docker_apt_key_id: "{% if docker_legacy_packages | bool %}{{ docker_legacy_apt_key_id }}{% else %}{{ docker_new_apt_key_id }}{% endif %}"
docker_apt_package: "{% if docker_legacy_packages | bool %}{{ docker_legacy_apt_package }}{% else %}{{ docker_new_apt_package }}{% endif %}"

# Docker APT repository configuration when docker_legacy_packages is false.
docker_new_apt_url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}"
docker_new_apt_repo: "deb {{ docker_new_apt_url }} {{ ansible_lsb.codename }} stable"
docker_new_apt_key_file: "gpg"
docker_new_apt_key_id: "0EBFCD88"
docker_new_apt_package: "docker-ce"

# Docker APT repository configuration when docker_legacy_packages is true.
docker_legacy_apt_url: "{{ 'http://obs.linaro.org/ERP:/17.12/Debian_9' if ansible_architecture == 'aarch64' else 'https://apt.dockerproject.org' }}"
docker_legacy_apt_repo: "{{ docker_legacy_apt_repo_aarch64 if ansible_architecture == 'aarch64' else docker_legacy_apt_repo_x86_64 }}"
docker_legacy_apt_repo_x86_64: "deb {{ docker_apt_url }}/repo {{ ansible_distribution | lower }}-{{ ansible_distribution_release | lower }} main"
docker_legacy_apt_repo_aarch64: "deb {{ docker_apt_url }} ./"
docker_legacy_apt_key_file: "{{ 'Release.key' if ansible_architecture == 'aarch64' else 'gpg' }}"
docker_legacy_apt_key_id: "{{ 'C32DA102AD89C2BE' if ansible_architecture == 'aarch64' else 'F76221572C52609D' }}"
docker_legacy_apt_package: "{{ 'docker-ce' if ansible_architecture == 'aarch64' else 'docker-engine=1.12.*' }}"

# Docker Yum repository configuration.
docker_yum_url: "{% if docker_legacy_packages | bool %}{{ docker_legacy_yum_url }}{% else %}{{ docker_new_yum_url }}{% endif %}"
docker_yum_baseurl: "{% if docker_legacy_packages | bool %}{{ docker_legacy_yum_baseurl }}{% else %}{{ docker_new_yum_baseurl }}{% endif %}"
docker_yum_gpgkey: "{% if docker_legacy_packages | bool %}{{ docker_legacy_yum_gpgkey }}{% else %}{{ docker_new_yum_gpgkey }}{% endif %}"
docker_yum_gpgcheck: true
docker_yum_package: "{% if docker_legacy_packages | bool %}{{ docker_legacy_yum_package }}{% else %}{{ docker_new_yum_package }}{% endif %}"

# Docker Yum repository configuration when docker_legacy_packages is false.
docker_new_yum_url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}"
docker_new_yum_baseurl: "{{ docker_yum_url }}/{{ ansible_distribution_major_version | lower }}/$basearch/stable"
docker_new_yum_gpgkey: "{{ docker_yum_url }}/gpg"
docker_new_yum_package: "docker-ce"

# Docker Yum repository configuration when docker_legacy_packages is true.
docker_legacy_yum_url: "https://yum.dockerproject.org"
docker_legacy_yum_baseurl: "{{ docker_legacy_yum_url }}/repo/main/{{ ansible_distribution | lower }}/{{ ansible_distribution_major_version | lower }}"
docker_legacy_yum_gpgkey: "{{ docker_legacy_yum_url }}/gpg"
docker_legacy_yum_package: "docker-engine-1.12.0"

customize_etc_hosts: True

create_kolla_user: True
create_kolla_user_sudoers: "{{ create_kolla_user }}"

kolla_user: "kolla"
kolla_group: "kolla"

enable_host_ntp: False

change_selinux: True

selinux_state: "permissive"

docker_storage_driver: ""

docker_custom_option: ""

# Ubuntu 18+ does not have easy_install available due to
# https://bugs.launchpad.net/ubuntu/+source/python-setuptools/+bug/1774419.
easy_install_available: >-
  {{ not (ansible_distribution == 'Ubuntu' and
          ansible_distribution_major_version is version(18, 'ge'))
     and
     not (ansible_distribution == 'Debian' and
          ansible_distribution_major_version is version(10, 'ge')) }}

debian_pkg_install:
 - "{{ docker_apt_package }}"
 - git
 - "{% if not easy_install_available %}python-pip{% endif %}"
 - python-setuptools
 - ntp

redhat_pkg_install:
 - epel-release
 - "{{ docker_yum_package }}"
 - git
 - python-setuptools
 - ntp
 - sudo

ubuntu_pkg_removals:
 - lxd
 - lxc
 - libvirt-bin
 - open-iscsi

redhat_pkg_removals:
 - libvirt
 - libvirt-daemon
 - iscsi-initiator-utils

# Path to a virtualenv in which to install python packages. If None, a
# virtualenv will not be used.
virtualenv:

# Whether the virtualenv will inherit packages from the global site-packages
# directory. This is typically required for modules such as yum and apt which
# are not available on PyPI.
virtualenv_site_packages: True
